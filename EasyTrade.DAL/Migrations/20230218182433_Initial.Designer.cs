// <auto-generated />
using System;
using EasyTrade.DAL.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EasyTrade.DAL.Migrations
{
    [DbContext(typeof(EasyTradeDbContext))]
    [Migration("20230218182433_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EasyTrade.DAL.Model.Balance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("EasyTrade.DAL.Model.BrokerCurrencyTrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BuyAmount")
                        .HasColumnType("numeric");

                    b.Property<long>("BuyCcyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("SellAmount")
                        .HasColumnType("numeric");

                    b.Property<long>("SellCcyId")
                        .HasColumnType("bigint");

                    b.Property<int>("TradeType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuyCcyId");

                    b.HasIndex("SellCcyId");

                    b.ToTable("BrokerTrades");
                });

            modelBuilder.Entity("EasyTrade.DAL.Model.ClientCurrencyTrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BrokerCurrencyTradeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("BuyAmount")
                        .HasColumnType("numeric");

                    b.Property<long>("BuyCcyId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("SellAmount")
                        .HasColumnType("numeric");

                    b.Property<long>("SellCcyId")
                        .HasColumnType("bigint");

                    b.Property<int>("TradeType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrokerCurrencyTradeId");

                    b.HasIndex("BuyCcyId");

                    b.HasIndex("SellCcyId");

                    b.ToTable("ClientTrades");
                });

            modelBuilder.Entity("EasyTrade.DAL.Model.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("EasyTrade.DAL.Model.CurrencyTradeCoefficient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Coefficient")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FirstCcyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SecondCcyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FirstCcyId");

                    b.HasIndex("SecondCcyId");

                    b.ToTable("Coefficients");
                });

            modelBuilder.Entity("EasyTrade.DAL.Model.Balance", b =>
                {
                    b.HasOne("EasyTrade.DAL.Model.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("EasyTrade.DAL.Model.BrokerCurrencyTrade", b =>
                {
                    b.HasOne("EasyTrade.DAL.Model.Currency", "BuyCcy")
                        .WithMany()
                        .HasForeignKey("BuyCcyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyTrade.DAL.Model.Currency", "SellCcy")
                        .WithMany()
                        .HasForeignKey("SellCcyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuyCcy");

                    b.Navigation("SellCcy");
                });

            modelBuilder.Entity("EasyTrade.DAL.Model.ClientCurrencyTrade", b =>
                {
                    b.HasOne("EasyTrade.DAL.Model.BrokerCurrencyTrade", "BrokerCurrencyTrade")
                        .WithMany()
                        .HasForeignKey("BrokerCurrencyTradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyTrade.DAL.Model.Currency", "BuyCcy")
                        .WithMany()
                        .HasForeignKey("BuyCcyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyTrade.DAL.Model.Currency", "SellCcy")
                        .WithMany()
                        .HasForeignKey("SellCcyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrokerCurrencyTrade");

                    b.Navigation("BuyCcy");

                    b.Navigation("SellCcy");
                });

            modelBuilder.Entity("EasyTrade.DAL.Model.CurrencyTradeCoefficient", b =>
                {
                    b.HasOne("EasyTrade.DAL.Model.Currency", "FirstCcy")
                        .WithMany()
                        .HasForeignKey("FirstCcyId");

                    b.HasOne("EasyTrade.DAL.Model.Currency", "SecondCcy")
                        .WithMany()
                        .HasForeignKey("SecondCcyId");

                    b.Navigation("FirstCcy");

                    b.Navigation("SecondCcy");
                });
#pragma warning restore 612, 618
        }
    }
}
